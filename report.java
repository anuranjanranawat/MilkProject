/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package milkproject;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vicky
 */
public class report extends javax.swing.JFrame {

    /**
     * Creates new form report
     */
     
    Connection connection;
   PreparedStatement ps;
   ResultSet rs;
    public Connection db()
{
    
                   try
                   {
                    connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/milkproject","root","password");
                     dbstatus.setText("Connected");
                    return connection;
                   }
                   catch(SQLException ex)
                   {
                       dbstatus.setText("Not Connected");
                   }
                   return null;
		
		
          	
}
    public report() {
        initComponents();
        db();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        branchreport = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        dbstatus = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        branchtable = new javax.swing.JTable();
        buildingreport = new javax.swing.JButton();
        locationreport = new javax.swing.JButton();
        milkreport = new javax.swing.JButton();
        customerreport = new javax.swing.JButton();
        employeereport = new javax.swing.JButton();
        supplierreport = new javax.swing.JButton();
        salarypaymentreport = new javax.swing.JButton();
        salarycodereport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 102, 51));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Report", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 24))); // NOI18N

        branchreport.setText("Branch Report");
        branchreport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                branchreportActionPerformed(evt);
            }
        });

        jLabel1.setText("Database : ");

        branchtable.setBackground(new java.awt.Color(255, 153, 51));
        branchtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Branch ID", "Branch Name", "No Of Staff", "Location", "Street", "Address", "Landline", "Mob No"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(branchtable);

        buildingreport.setText("Building Report");
        buildingreport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildingreportActionPerformed(evt);
            }
        });

        locationreport.setText("Location Report");
        locationreport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationreportActionPerformed(evt);
            }
        });

        milkreport.setText("Milk Report");
        milkreport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                milkreportActionPerformed(evt);
            }
        });

        customerreport.setText("Customer Report");
        customerreport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerreportActionPerformed(evt);
            }
        });

        employeereport.setText("Employee Report");
        employeereport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeereportActionPerformed(evt);
            }
        });

        supplierreport.setText("Supplier Report");
        supplierreport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierreportActionPerformed(evt);
            }
        });

        salarypaymentreport.setText("Salary Payment Report");
        salarypaymentreport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salarypaymentreportActionPerformed(evt);
            }
        });

        salarycodereport.setText("Salary Code Report");
        salarycodereport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salarycodereportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(dbstatus)
                .addGap(121, 121, 121))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(employeereport)
                        .addGap(18, 18, 18)
                        .addComponent(supplierreport)
                        .addGap(18, 18, 18)
                        .addComponent(salarypaymentreport)
                        .addGap(18, 18, 18)
                        .addComponent(salarycodereport, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(branchreport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buildingreport)
                        .addGap(18, 18, 18)
                        .addComponent(locationreport)
                        .addGap(18, 18, 18)
                        .addComponent(milkreport)
                        .addGap(18, 18, 18)
                        .addComponent(customerreport)))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(dbstatus))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(branchreport)
                    .addComponent(buildingreport)
                    .addComponent(locationreport)
                    .addComponent(milkreport)
                    .addComponent(customerreport))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(employeereport)
                    .addComponent(supplierreport)
                    .addComponent(salarypaymentreport)
                    .addComponent(salarycodereport))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void branchreportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_branchreportActionPerformed

        branchtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Branch ID", "Branch Name", "No Of Staff", "Location", "Street", "Address", "Landline", "Mob No"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        try
        {
         ps = connection.prepareStatement("SELECT * FROM milkproject.branch_detail");
         rs = ps.executeQuery();
         DefaultTableModel tm = (DefaultTableModel)branchtable.getModel();
         tm.setRowCount(0);
         
         while(rs.next())
         {
          Object o[] = {rs.getInt("BRANCH_ID"),rs.getString("BRANCH_NAME"),rs.getInt("NO_OF_STAFF"),rs.getString("LOCATION"),rs.getString("ADDRESS"),rs.getString("LANDLINE"),rs.getString("MOB_NO")};
          tm.addRow(o);
         }
        }
        catch(SQLException sql)
                {
                    JOptionPane.showMessageDialog(null,sql.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
                }
    }//GEN-LAST:event_branchreportActionPerformed

    private void buildingreportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildingreportActionPerformed
         branchtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Building ID", "Area Name", "Street", "Address", "Telephone"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        try
        {
         ps = connection.prepareStatement("SELECT * FROM milkproject.building_detail");
         rs = ps.executeQuery();
         DefaultTableModel tm = (DefaultTableModel)branchtable.getModel();
         tm.setRowCount(0);
         
         while(rs.next())
         {
          Object o[] = {rs.getInt("BUILDING_ID"),rs.getString("AREA_NAME"),rs.getString("STREET"),rs.getString("ADDRESS")};
          tm.addRow(o);
         }
        }
        catch(SQLException sql)
                {
                    JOptionPane.showMessageDialog(null,sql.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
                }
    }//GEN-LAST:event_buildingreportActionPerformed

    private void locationreportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationreportActionPerformed
         branchtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Location ID", "Area Name", "Street", "Address", "Telephone"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        try
        {
         ps = connection.prepareStatement("SELECT * FROM milkproject.location_detail");
         rs = ps.executeQuery();
         DefaultTableModel tm = (DefaultTableModel)branchtable.getModel();
         tm.setRowCount(0);
         
         while(rs.next())
         {
          Object o[] = {rs.getInt("LOCATION_ID"),rs.getString("AREA_NAME"),rs.getString("STREET"),rs.getString("ADDRESS"),rs.getString("TELEPHONE")};
          tm.addRow(o);
         }
        }
        catch(SQLException sql)
                {
                    JOptionPane.showMessageDialog(null,sql.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
                }
    }//GEN-LAST:event_locationreportActionPerformed

    private void milkreportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_milkreportActionPerformed
         branchtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Milk ID", "Specification", "Product ID", "Milking Date", "Expire Date", "Unit Price", "Quantity", "Product Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        try
        {
         ps = connection.prepareStatement("SELECT * FROM milkproject.milk_detail");
         rs = ps.executeQuery();
         DefaultTableModel tm = (DefaultTableModel)branchtable.getModel();
         tm.setRowCount(0);
         
         while(rs.next())
         {
          Object o[] = {rs.getInt("MILK_ID"),rs.getString("SPECIFICATION"),rs.getString("PRODUCT_ID"),rs.getString("MILKING_DATE"),rs.getString("EXPIRE_DATE"),rs.getString("UNIT_PRICE"),rs.getString("QUANTITY"),rs.getString("PRODUCT_NAME")};
          tm.addRow(o);
         }
        }
        catch(SQLException sql)
                {
                    JOptionPane.showMessageDialog(null,sql.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
                }
    }//GEN-LAST:event_milkreportActionPerformed

    private void customerreportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerreportActionPerformed
        branchtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer ID", "First Name", "Last Name", "Gender", "Age", "Address"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        try
        {
         ps = connection.prepareStatement("SELECT * FROM milkproject.customer_detail");
         rs = ps.executeQuery();
         DefaultTableModel tm = (DefaultTableModel)branchtable.getModel();
         tm.setRowCount(0);
         
         while(rs.next())
         {
          Object o[] = {rs.getInt("CUSTOMER_ID"),rs.getString("FIRST_NAME"),rs.getString("LAST_NAME"),rs.getString("GENDER"),rs.getString("AGE"),rs.getString("ADDRESS")};
          tm.addRow(o);
         }
        }
        catch(SQLException sql)
                {
                    JOptionPane.showMessageDialog(null,sql.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
                }
    }//GEN-LAST:event_customerreportActionPerformed

    private void employeereportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeereportActionPerformed
         branchtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "EMPLOYEE ID", "FIRST NAME", "LAST NAME", "POSITION", "TITLE", "GENDER", "AGE", "ADDRESS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        try
        {
         ps = connection.prepareStatement("SELECT * FROM milkproject.employee_detail");
         rs = ps.executeQuery();
         DefaultTableModel tm = (DefaultTableModel)branchtable.getModel();
         tm.setRowCount(0);
         
         while(rs.next())
         {
          Object o[] = {rs.getInt("EMPLOYEE_ID"),rs.getString("FIRST_NAME"),rs.getString("LAST_NAME"),rs.getString("POSITION"),rs.getString("TITLE"),rs.getString("GENDER"),rs.getString("AGE"),rs.getString("ADDRESS")};
          tm.addRow(o);
         }
        }
        catch(SQLException sql)
                {
                    JOptionPane.showMessageDialog(null,sql.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
                }
    }//GEN-LAST:event_employeereportActionPerformed

    private void supplierreportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierreportActionPerformed
        branchtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SUPPLIER ID", "FIRST NAME", "LAST NAME", "PRODUCT NAME", "MILKING DATE", "UNIT PRICE", "QUANTITY", "EXPIRE DATE","TELEPHONE","ADDRESS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        try
        {
         ps = connection.prepareStatement("SELECT * FROM milkproject.supplier_detail");
         rs = ps.executeQuery();
         DefaultTableModel tm = (DefaultTableModel)branchtable.getModel();
         tm.setRowCount(0);
         
         while(rs.next())
         {
          Object o[] = {rs.getInt("SUPPLIER_ID"),rs.getString("FIRST_NAME"),rs.getString("LAST_NAME"),rs.getString("PRODUCT_NAME"),rs.getString("MILKING_DATE"),rs.getString("UNIT_PRICE"),rs.getString("QUANTITY"),rs.getString("EXPIRE_DATE"),rs.getString("TELEPHONE"),rs.getString("ADDRESS")};
          tm.addRow(o);
         }
        }
        catch(SQLException sql)
                {
                    JOptionPane.showMessageDialog(null,sql.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
                }
    }//GEN-LAST:event_supplierreportActionPerformed

    private void salarypaymentreportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salarypaymentreportActionPerformed
         branchtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SALARY PAYMENT ID", "TITLE", "LOCATION", "AMOUNT", "WEEKLY PAYMENT", "MONTHLY PAYMENT", "TELEPHONE", "ADDRESS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        try
        {
         ps = connection.prepareStatement("SELECT * FROM milkproject.salary_payment_detail");
         rs = ps.executeQuery();
         DefaultTableModel tm = (DefaultTableModel)branchtable.getModel();
         tm.setRowCount(0);
         
         while(rs.next())
         {
          Object o[] = {rs.getInt("SALARY_PAYMENT_ID"),rs.getString("TITLE"),rs.getString("LOCATION"),rs.getString("AMOUNT"),rs.getString("WEEKLY_PAYMENT"),rs.getString("MONTHLY_PAYMENT"),rs.getString("TELEPHONE"),rs.getString("ADDRESS")};
          tm.addRow(o);
         }
        }
        catch(SQLException sql)
                {
                    JOptionPane.showMessageDialog(null,sql.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
                }
    }//GEN-LAST:event_salarypaymentreportActionPerformed

    private void salarycodereportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salarycodereportActionPerformed
         branchtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SALARY CODE", "GROSS SALARY", "TPR", "CSR", "NET SALARY"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        try
        {
         ps = connection.prepareStatement("SELECT * FROM milkproject.salary_code_detail");
         rs = ps.executeQuery();
         DefaultTableModel tm = (DefaultTableModel)branchtable.getModel();
         tm.setRowCount(0);
         
         while(rs.next())
         {
          Object o[] = {rs.getInt("SALARY_CODE"),rs.getString("GROSS_SALARY"),rs.getString("TPR"),rs.getString("CSR"),rs.getString("NET_SALARY")};
          tm.addRow(o);
         }
        }
        catch(SQLException sql)
                {
                    JOptionPane.showMessageDialog(null,sql.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
                }
    }//GEN-LAST:event_salarycodereportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new report().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton branchreport;
    private javax.swing.JTable branchtable;
    private javax.swing.JButton buildingreport;
    private javax.swing.JButton customerreport;
    private javax.swing.JLabel dbstatus;
    private javax.swing.JButton employeereport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton locationreport;
    private javax.swing.JButton milkreport;
    private javax.swing.JButton salarycodereport;
    private javax.swing.JButton salarypaymentreport;
    private javax.swing.JButton supplierreport;
    // End of variables declaration//GEN-END:variables
}
